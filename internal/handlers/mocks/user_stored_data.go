// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/user_stored_data.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handlers/user_stored_data.go -destination=./internal/handlers/mocks/user_stored_data.go
//
// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/goph-keeper/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserStoredDataService is a mock of userStoredDataService interface.
type MockuserStoredDataService struct {
	ctrl     *gomock.Controller
	recorder *MockuserStoredDataServiceMockRecorder
}

// MockuserStoredDataServiceMockRecorder is the mock recorder for MockuserStoredDataService.
type MockuserStoredDataServiceMockRecorder struct {
	mock *MockuserStoredDataService
}

// NewMockuserStoredDataService creates a new mock instance.
func NewMockuserStoredDataService(ctrl *gomock.Controller) *MockuserStoredDataService {
	mock := &MockuserStoredDataService{ctrl: ctrl}
	mock.recorder = &MockuserStoredDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStoredDataService) EXPECT() *MockuserStoredDataServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockuserStoredDataService) Add(ctx context.Context, userID int, dataType string, data any, meta string) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, dataType, data, meta)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockuserStoredDataServiceMockRecorder) Add(ctx, userID, dataType, data, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockuserStoredDataService)(nil).Add), ctx, userID, dataType, data, meta)
}

// DeleteBatch mocks base method.
func (m *MockuserStoredDataService) DeleteBatch(ctx context.Context, userID int, ids []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, userID, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockuserStoredDataServiceMockRecorder) DeleteBatch(ctx, userID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockuserStoredDataService)(nil).DeleteBatch), ctx, userID, ids)
}

// GetAllUserData mocks base method.
func (m *MockuserStoredDataService) GetAllUserData(ctx context.Context, userID int) ([]domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserData", ctx, userID)
	ret0, _ := ret[0].([]domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserData indicates an expected call of GetAllUserData.
func (mr *MockuserStoredDataServiceMockRecorder) GetAllUserData(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserData", reflect.TypeOf((*MockuserStoredDataService)(nil).GetAllUserData), ctx, userID)
}

// GetUserData mocks base method.
func (m *MockuserStoredDataService) GetUserData(ctx context.Context, userID int, dataType string, filters *domain.StorageFilters) (*domain.PaginatedResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, userID, dataType, filters)
	ret0, _ := ret[0].(*domain.PaginatedResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockuserStoredDataServiceMockRecorder) GetUserData(ctx, userID, dataType, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockuserStoredDataService)(nil).GetUserData), ctx, userID, dataType, filters)
}

// GetUserDataByID mocks base method.
func (m *MockuserStoredDataService) GetUserDataByID(ctx context.Context, userID, id int) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByID", ctx, userID, id)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByID indicates an expected call of GetUserDataByID.
func (mr *MockuserStoredDataServiceMockRecorder) GetUserDataByID(ctx, userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByID", reflect.TypeOf((*MockuserStoredDataService)(nil).GetUserDataByID), ctx, userID, id)
}

// UpdateUserData mocks base method.
func (m *MockuserStoredDataService) UpdateUserData(ctx context.Context, userID, dataID int, data any, meta string) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", ctx, userID, dataID, data, meta)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockuserStoredDataServiceMockRecorder) UpdateUserData(ctx, userID, dataID, data, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockuserStoredDataService)(nil).UpdateUserData), ctx, userID, dataID, data, meta)
}
