// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handlers/user.go -destination=./internal/handlers/mocks/user.go
//
// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/goph-keeper/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockuserService) Authorize(ctx context.Context, email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockuserServiceMockRecorder) Authorize(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockuserService)(nil).Authorize), ctx, email, password)
}

// Create mocks base method.
func (m *MockuserService) Create(ctx context.Context, email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuserServiceMockRecorder) Create(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserService)(nil).Create), ctx, email, password)
}

// MocktokenGenerator is a mock of tokenGenerator interface.
type MocktokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGeneratorMockRecorder
}

// MocktokenGeneratorMockRecorder is the mock recorder for MocktokenGenerator.
type MocktokenGeneratorMockRecorder struct {
	mock *MocktokenGenerator
}

// NewMocktokenGenerator creates a new mock instance.
func NewMocktokenGenerator(ctrl *gomock.Controller) *MocktokenGenerator {
	mock := &MocktokenGenerator{ctrl: ctrl}
	mock.recorder = &MocktokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenGenerator) EXPECT() *MocktokenGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MocktokenGenerator) Generate(ctx context.Context, user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MocktokenGeneratorMockRecorder) Generate(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MocktokenGenerator)(nil).Generate), ctx, user)
}
