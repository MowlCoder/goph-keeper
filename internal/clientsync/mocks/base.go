// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/clientsync/base.go
//
// Generated by this command:
//
//	mockgen -source=./internal/clientsync/base.go -destination=./internal/clientsync/mocks/base.go
//
// Package mock_clientsync is a generated GoMock package.
package mock_clientsync

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/goph-keeper/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockserverApi is a mock of serverApi interface.
type MockserverApi struct {
	ctrl     *gomock.Controller
	recorder *MockserverApiMockRecorder
}

// MockserverApiMockRecorder is the mock recorder for MockserverApi.
type MockserverApiMockRecorder struct {
	mock *MockserverApi
}

// NewMockserverApi creates a new mock instance.
func NewMockserverApi(ctrl *gomock.Controller) *MockserverApi {
	mock := &MockserverApi{ctrl: ctrl}
	mock.recorder = &MockserverApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserverApi) EXPECT() *MockserverApiMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockserverApi) Add(ctx context.Context, entity domain.UserStoredData) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, entity)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockserverApiMockRecorder) Add(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockserverApi)(nil).Add), ctx, entity)
}

// DeleteBatch mocks base method.
func (m *MockserverApi) DeleteBatch(ctx context.Context, ids []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockserverApiMockRecorder) DeleteBatch(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockserverApi)(nil).DeleteBatch), ctx, ids)
}

// GetAll mocks base method.
func (m *MockserverApi) GetAll(ctx context.Context) ([]domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockserverApiMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockserverApi)(nil).GetAll), ctx)
}

// UpdateByID mocks base method.
func (m *MockserverApi) UpdateByID(ctx context.Context, id int, data any, meta string) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, data, meta)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockserverApiMockRecorder) UpdateByID(ctx, id, data, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockserverApi)(nil).UpdateByID), ctx, id, data, meta)
}

// MocklocalService is a mock of localService interface.
type MocklocalService struct {
	ctrl     *gomock.Controller
	recorder *MocklocalServiceMockRecorder
}

// MocklocalServiceMockRecorder is the mock recorder for MocklocalService.
type MocklocalServiceMockRecorder struct {
	mock *MocklocalService
}

// NewMocklocalService creates a new mock instance.
func NewMocklocalService(ctrl *gomock.Controller) *MocklocalService {
	mock := &MocklocalService{ctrl: ctrl}
	mock.recorder = &MocklocalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocalService) EXPECT() *MocklocalServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MocklocalService) Add(ctx context.Context, dataType string, data any, meta string) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, dataType, data, meta)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MocklocalServiceMockRecorder) Add(ctx, dataType, data, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MocklocalService)(nil).Add), ctx, dataType, data, meta)
}

// DeleteBatch mocks base method.
func (m *MocklocalService) DeleteBatch(ctx context.Context, ids []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MocklocalServiceMockRecorder) DeleteBatch(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MocklocalService)(nil).DeleteBatch), ctx, ids)
}

// GetAll mocks base method.
func (m *MocklocalService) GetAll(ctx context.Context) ([]domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MocklocalServiceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MocklocalService)(nil).GetAll), ctx)
}

// UpdateByID mocks base method.
func (m *MocklocalService) UpdateByID(ctx context.Context, id int, data any, meta string) (*domain.UserStoredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, data, meta)
	ret0, _ := ret[0].(*domain.UserStoredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MocklocalServiceMockRecorder) UpdateByID(ctx, id, data, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MocklocalService)(nil).UpdateByID), ctx, id, data, meta)
}

// MocklocalRepository is a mock of localRepository interface.
type MocklocalRepository struct {
	ctrl     *gomock.Controller
	recorder *MocklocalRepositoryMockRecorder
}

// MocklocalRepositoryMockRecorder is the mock recorder for MocklocalRepository.
type MocklocalRepositoryMockRecorder struct {
	mock *MocklocalRepository
}

// NewMocklocalRepository creates a new mock instance.
func NewMocklocalRepository(ctrl *gomock.Controller) *MocklocalRepository {
	mock := &MocklocalRepository{ctrl: ctrl}
	mock.recorder = &MocklocalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocalRepository) EXPECT() *MocklocalRepositoryMockRecorder {
	return m.recorder
}

// SyncUpdate mocks base method.
func (m *MocklocalRepository) SyncUpdate(ctx context.Context, oldID, newID, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncUpdate", ctx, oldID, newID, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncUpdate indicates an expected call of SyncUpdate.
func (mr *MocklocalRepositoryMockRecorder) SyncUpdate(ctx, oldID, newID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUpdate", reflect.TypeOf((*MocklocalRepository)(nil).SyncUpdate), ctx, oldID, newID, version)
}
