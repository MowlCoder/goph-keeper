// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/server/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/server/user.go -destination=./internal/services/server/mocks/user.go
//
// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	reflect "reflect"

	domain "github.com/MowlCoder/goph-keeper/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserRepository) Create(ctx context.Context, email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockuserRepositoryMockRecorder) Create(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepository)(nil).Create), ctx, email, password)
}

// GetByEmail mocks base method.
func (m *MockuserRepository) GetByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockuserRepositoryMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockuserRepository)(nil).GetByEmail), ctx, email)
}

// MockpasswordHasher is a mock of passwordHasher interface.
type MockpasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockpasswordHasherMockRecorder
}

// MockpasswordHasherMockRecorder is the mock recorder for MockpasswordHasher.
type MockpasswordHasherMockRecorder struct {
	mock *MockpasswordHasher
}

// NewMockpasswordHasher creates a new mock instance.
func NewMockpasswordHasher(ctrl *gomock.Controller) *MockpasswordHasher {
	mock := &MockpasswordHasher{ctrl: ctrl}
	mock.recorder = &MockpasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpasswordHasher) EXPECT() *MockpasswordHasherMockRecorder {
	return m.recorder
}

// Equal mocks base method.
func (m *MockpasswordHasher) Equal(original, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", original, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockpasswordHasherMockRecorder) Equal(original, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockpasswordHasher)(nil).Equal), original, hash)
}

// Hash mocks base method.
func (m *MockpasswordHasher) Hash(original string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", original)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockpasswordHasherMockRecorder) Hash(original any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockpasswordHasher)(nil).Hash), original)
}
